学习目标
掌握进程和线程概念基应用方法

课程内容
a.进程和线程
b.多线程

a.进程和线程的概念
进程：进程就是正在运行的程序实例
线程：进程中的一个实体，被系统独立调度分派的基本单位，线程自己不拥有系统资源，但是它可以和同属一个进程的其他线程共享所拥有的所有资源
进程和线程的区别：
1.地址空间：进程内的一个执行单元，进程至少有一个线程，他们共享进程的地址空间，进程拥有自己的独立空间
2.资源拥有：进程是资源分配和拥有的单位，同一个进程内的线程共享进程资源
3.线程是处理器调度的基本单位，进程不是
4.二者均可以并发执行

b.多线程(theading)
加速程序及算的有效方式
b1.添加线程
import threading
print(threading.active_count()) #获取以经济获得线程数量
print(threading.current_thread())#查看当前运行线程
'''添加线程'''
def thread_job():
        print('当前进程是%s'% threading.current_thread())

def thread_job1():
        print('当前进程是%s'% threading.current_thread())

thread=threading.Thread(target=thread_job,) #定义线程
thread1=threading.Thread(target=thread_job1,) #定义线程
thread.start()
thread1.start()
b2.join功能实例
#如果不加join，程序输出结果混乱,finish完全取决于两个线程的执行速度，完全有可能t2结束出现在finish之前。这种凡是可以用join来加以控制
def t1():
        print('t1开始啦')
        for i in range(10):
                time.sleep(0.1)
        print('t1结束')

def t2():
        print('t2开始')
        print('t2结束')

th1=threading.Thread(target=t1,)
th2=threading.Thread(target=t2,)
th1.start()
th2.start()
th2.join()
th1.join()
print('finish!!!')
b3.gil锁(global interpreter lock)
python完全支持多线程编程。在实现代码时候完全并行是不安全的，通常会有一个全局解释器锁进行保护，确保任何时候
都只有一个线程在执行，gil锁最大问题就是python的多线程程序不能利用多核cpu优势。
b4.线程锁







